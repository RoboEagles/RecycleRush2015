// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.RecycleRush.subsystems;

import org.usfirst.frc4579.RecycleRush.RobotMap;
import org.usfirst.frc4579.RecycleRush.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class liftingMechanism extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController liftMotor = RobotMap.liftingMechanismliftMotor;
    Encoder liftMechanismInput = RobotMap.liftingMechanismliftMechanismInput;
    DigitalInput switchHigh = RobotMap.liftingMechanismswitchHigh;
    DigitalInput switchLow = RobotMap.liftingMechanismswitchLow;
    DigitalInput toteBool = RobotMap.liftingMechanismtoteBool;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static double targetHeight; // TARGET HEIGHT IN INCHES
    private double targetRate = 12; // TARGET RATE IN INCHES/SEC
    
    // Initialize your subsystem here
    public liftingMechanism() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("liftingMechanism", 0.225, 0.05625, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(true);
        LiveWindow.addActuator("liftingMechanism", "PIDSubsystem Controller", getPIDController());
        getPIDController().setOutputRange(-1.0, 1.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
        enable();
        
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
//.pidGet() returns net distance encoder traveled
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return liftMechanismInput.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	double limit = 0.6;
    	if (Math.abs(output) > limit) output = output/Math.abs(output) * limit;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        liftMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
    public double getEncoderRate() {
    	return liftMechanismInput.getRate();
    }
    
    public double getRateError() {
    	return targetRate - getEncoderRate();
    }
    
    public void setHeight(double height) {
    	targetHeight = height;
    	setSetpoint(height);
    	System.out.println(getSetpoint());
    }
    
    public double getOutputValue() {
    	return 0.;
    }
    
}
