// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.RecycleRush;

import org.usfirst.frc4579.RecycleRush.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton injectObjectButton;
    public JoystickButton ejectObjectButton;
    public JoystickButton spinLeftButton;
    public JoystickButton spinRightButton;
    public Joystick driveStick;
    public JoystickButton liftTEST;
    public JoystickButton resetLifterButton;
    public Joystick liftStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        liftStick = new Joystick(0);
        
        resetLifterButton = new JoystickButton(liftStick, 1);
        resetLifterButton.whenPressed(new resetLifter());
        liftTEST = new JoystickButton(liftStick, 2);
        liftTEST.whenPressed(new TEST());
        driveStick = new Joystick(1);
        
        spinRightButton = new JoystickButton(driveStick, 5);
        spinRightButton.whileHeld(new spinRight());
        spinLeftButton = new JoystickButton(driveStick, 4);
        spinLeftButton.whileHeld(new spinLeft());
        ejectObjectButton = new JoystickButton(driveStick, 3);
        ejectObjectButton.whileHeld(new ejectObject());
        injectObjectButton = new JoystickButton(driveStick, 2);
        injectObjectButton.whileHeld(new injectObject());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("injectObject", new injectObject());

        SmartDashboard.putData("ejectObject", new ejectObject());

        SmartDashboard.putData("spinLeft", new spinLeft());

        SmartDashboard.putData("spinRight", new spinRight());

        SmartDashboard.putData("TEST", new TEST());

        SmartDashboard.putData("resetLifter", new resetLifter());

        SmartDashboard.putData("AUTOCG_moveBoth", new AUTOCG_moveBoth());

        SmartDashboard.putData("AUTOCG_moveContainer", new AUTOCG_moveContainer());

        SmartDashboard.putData("AUTOCG_moveTote", new AUTOCG_moveTote());

        SmartDashboard.putData("liftTote", new liftTote());

        SmartDashboard.putData("liftContainer", new liftContainer());

        SmartDashboard.putData("moveToTote", new moveToTote());

        SmartDashboard.putData("turnToAZFromTote", new turnToAZFromTote());

        SmartDashboard.putData("turnToTote", new turnToTote());

        SmartDashboard.putData("turnToAZFromContainer", new turnToAZFromContainer());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriveStick() {
        return driveStick;
    }

    public Joystick getliftStick() {
        return liftStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  
}

