// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.RecycleRush3.subsystems;

import org.usfirst.frc4579.RecycleRush3.Robot;
import org.usfirst.frc4579.RecycleRush3.RobotMap;
import org.usfirst.frc4579.RecycleRush3.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;
import edu.wpi.first.wpilibj.Gyro;


/**
 *
 */
public class Drivetrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftMotor = RobotMap.drivetrainLeftMotor;
    SpeedController rightMotor = RobotMap.drivetrainRightMotor;
    RobotDrive drivebase = RobotMap.drivetrainDrivebase;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    private double xLast, yLast, zLast = 0.;  //for low pass filter.
    private double lpfK = 0.2;
    
    public void drive(double turnError, double speed) { // SHOULD BE CALLED IN ITERATIONS AS TO ADJUST FOR TURNING
    	double k = 1.0/180.0,
    		speedAdjust = turnError * k;   	
    	leftMotor.set(speed - speedAdjust);
    	rightMotor.set(speed + speedAdjust);
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void driveManual(Joystick stick)  {
    	//square the inputs.
    	double x = Math.pow(stick.getX(), 2);
    	double y = Math.pow(stick.getY(), 2);
    	double z = Math.pow(stick.getZ(), 2);
    	//low pass filter the inputs.
    	x = xLast + lpfK * (x - xLast);
    	y = yLast + lpfK * (y - yLast);
    	z = zLast + lpfK * (z - zLast);
    	//drive the robot.
    	drivebase.arcadeDrive(z, y);
    	//set old values
    	xLast = stick.getX();
    	yLast = stick.getY();
    	zLast = stick.getZ();
    }
    
    public void driveAuto(double speed, double rotation)  {
    	//in the library, the rotation value is used to create a delta speed to each wheel.
    	drivebase.arcadeDrive(speed, rotation);
    }
    
    public void driveTurn(double speed, double turnRadius)  {
    	//This method should give a more predictable turn control.
    	//speed is expected speed of center point of axis (-1 to +1).
    	//turnRadius is positive to the right, 
    	//  and negative to the left of center point (-1E6 to +1E6 inches).
    	double width = 20.;   //width between drive wheels, inches.
    	double speedLeft = 0.0;
    	double speedRight = 0.0;
    	double sign = turnRadius / Math.abs(turnRadius);
    	if (Math.abs(turnRadius) < 0.1)  {
    		speedLeft = speed * 0.5 * sign;
    		speedRight = speed * 0.5 * sign;
    	}
    	if (Math.abs(turnRadius) >= 0.1)  {
    		double delta = width * speed * 0.5 / turnRadius;
    		speedLeft = speed + (delta * sign);
    		speedRight = speed - (delta * sign);
    	}
    	leftMotor.set(speedLeft);
    	rightMotor.set(speedRight);    			
    }
    
    public void stop()  {
    	leftMotor.set(0);
    	rightMotor.set(0);
    }
}

