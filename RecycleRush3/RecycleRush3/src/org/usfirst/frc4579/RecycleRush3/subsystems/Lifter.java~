// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.RecycleRush3.subsystems;

import org.usfirst.frc4579.RecycleRush3.RobotMap;
import org.usfirst.frc4579.RecycleRush3.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Lifter extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput topLimit = RobotMap.lifterTopLimit;
    DigitalInput botLimit = RobotMap.lifterBotLimit;
    Encoder encoder = RobotMap.lifterEncoder;
    SpeedController motor = RobotMap.lifterMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //Low pass filter variables
    private double lpfk, yOld = 0.,
    		encoderDistance = 0.;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void manualControl(Joystick stick) {
    	double y = stick.getY();
    	y = yOld + lpfk * (y - yOld);
    	motor.set(-y);
    	yOld = stick.getY();
    }
    
    public void setSetpoint(double height) { // needs to be ran iteratively
    	encoderDistance = encoder.getDistance();
    	double rate = encoder.getRate(),
    			k = (1.0/2.0),
    			error = (height - encoderDistance)*k,
    			targetRate = 0.25; // Inches per second
    	if (Math.abs(rate) > targetRate) {
    		error = error / rate / targetRate;
    	}
    	motor.set(error);
    }
    
    public double getDistance() {
    	return encoderDistance;
    }
    
    public void stop() {
    	motor.set(0);
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Lift());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}

