// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.RecycleRush3;

import org.usfirst.frc4579.RecycleRush3.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton inject;
    public JoystickButton eject;
    public JoystickButton spinLeft;
    public JoystickButton spinRight;
    public Joystick driveStick;
    public JoystickButton inject2;
    public JoystickButton eject2;
    public JoystickButton spinLeft2;
    public JoystickButton spinRight2;
    public Joystick liftStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        liftStick = new Joystick(1);
        
        spinRight2 = new JoystickButton(liftStick, 4);
        spinRight2.whileHeld(new SpinBktRight());
        spinLeft2 = new JoystickButton(liftStick, 5);
        spinLeft2.whileHeld(new SpinBktLeft());
        eject2 = new JoystickButton(liftStick, 2);
        eject2.whileHeld(new EjectTote());
        inject2 = new JoystickButton(liftStick, 1);
        inject2.whileHeld(new InjectTote());
        driveStick = new Joystick(0);
        
        spinRight = new JoystickButton(driveStick, 4);
        spinRight.whileHeld(new SpinBktRight());
        spinLeft = new JoystickButton(driveStick, 3);
        spinLeft.whileHeld(new SpinBktLeft());
        eject = new JoystickButton(driveStick, 2);
        eject.whileHeld(new EjectTote());
        inject = new JoystickButton(driveStick, 1);
        inject.whileHeld(new InjectTote());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Auto1", new Auto1());

        SmartDashboard.putData("Auto2", new Auto2());

        SmartDashboard.putData("InjectTote", new InjectTote());

        SmartDashboard.putData("EjectTote", new EjectTote());

        SmartDashboard.putData("SpinBktLeft", new SpinBktLeft());

        SmartDashboard.putData("SpinBktRight", new SpinBktRight());

        SmartDashboard.putData("Lift", new Lift());

        SmartDashboard.putData("DriveToAZ", new DriveToAZ());

        SmartDashboard.putData("Rotate45", new Rotate45());

        SmartDashboard.putData("Rotate90", new Rotate90());

        SmartDashboard.putData("Capture", new Capture());

        SmartDashboard.putData("MoveToPrimaryTote", new MoveToPrimaryTote());

        SmartDashboard.putData("FullDriveForward", new FullDriveForward());

        SmartDashboard.putData("FullDriveBackward", new FullDriveBackward());

        SmartDashboard.putData("LiftContainer", new LiftContainer());

        SmartDashboard.putData("LiftTote1", new LiftTote1());

        SmartDashboard.putData("LiftTote2", new LiftTote2());

        SmartDashboard.putData("LiftTote3", new LiftTote3());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveStick() {
        return driveStick;
    }

    public Joystick getLiftStick() {
        return liftStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

