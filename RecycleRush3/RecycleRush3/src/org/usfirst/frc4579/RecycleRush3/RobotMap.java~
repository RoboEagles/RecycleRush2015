// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.RecycleRush3;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.livewindow.LiveWindowSendable;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainLeftMotor;
    public static SpeedController drivetrainRightMotor;
    public static RobotDrive drivetrainDrivebase;
    public static SpeedController alignerLeftMotor;
    public static SpeedController alignerRightMotor;
    public static Gyro measurementGyro;
    public static DigitalInput lifterTopLimit;
    public static DigitalInput lifterBotLimit;
    public static Encoder lifterEncoder;
    public static SpeedController lifterMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static Accelerometer robotAccelerometer;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainLeftMotor = new Talon(0);
        LiveWindow.addActuator("Drivetrain", "LeftMotor", (Talon) drivetrainLeftMotor);
        
        drivetrainRightMotor = new Talon(1);
        LiveWindow.addActuator("Drivetrain", "RightMotor", (Talon) drivetrainRightMotor);
        
        drivetrainDrivebase = new RobotDrive(drivetrainLeftMotor, drivetrainRightMotor);
        
        drivetrainDrivebase.setSafetyEnabled(true);
        drivetrainDrivebase.setExpiration(0.1);
        drivetrainDrivebase.setSensitivity(0.5);
        drivetrainDrivebase.setMaxOutput(1.0);

        drivetrainDrivebase.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);        

        alignerLeftMotor = new Victor(3);
        LiveWindow.addActuator("Aligner", "LeftMotor", (Victor) alignerLeftMotor);
        
        alignerRightMotor = new Victor(4);
        LiveWindow.addActuator("Aligner", "RightMotor", (Victor) alignerRightMotor);
        
        measurementGyro = new Gyro(0);
        LiveWindow.addSensor("Measurement", "Gyro", measurementGyro);
        measurementGyro.setSensitivity(0.007);
        lifterTopLimit = new DigitalInput(0);
        LiveWindow.addSensor("Lifter", "TopLimit", lifterTopLimit);
        
        lifterBotLimit = new DigitalInput(1);
        LiveWindow.addSensor("Lifter", "BotLimit", lifterBotLimit);
        
        lifterEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Lifter", "Encoder", lifterEncoder);
        lifterEncoder.setDistancePerPulse(0.010996);
        lifterEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        lifterMotor = new Talon(2);
        LiveWindow.addActuator("Lifter", "Motor", (Talon) lifterMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        robotAccelerometer = new BuiltInAccelerometer(); // THIS IS THE ROBORIO ACCELEROMETER
        /*
         * ACCELEROMETER NOTES:
         * X = LEFT / RIGHT; Z = FORWARD / BACK; Y = UP / DOWN (Y IS IRRELEVANT UNLESS WE WANT TO FLY)
         * THIS ACCELEROMETER IS ACCESSED THROUGH THE Drivetrain SUBSYSTEM
         */
        // TRIED TO ADD ACCELEROMETER TO LIVE WINDOW-- WE'LL SEE HOW THAT GOES
        LiveWindow.addSensor("Measurement", "Acccelerometer", (LiveWindowSendable) robotAccelerometer); 
        
        System.out.println("**** RobotMap has initialized");

    }
}
