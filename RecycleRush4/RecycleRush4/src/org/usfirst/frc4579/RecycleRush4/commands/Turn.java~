// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.RecycleRush4.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4579.RecycleRush4.Robot;

/**
 *
 */
public class  Turn extends Command {
	
	private double speed = 0.0,
					currentAngle = 0.0,
					angle = 0.0,
					radius = 0.0,
					target = 0.0;

    public Turn(double setSpeed, double turnAngle, double radius) { // Must have negative radius for a negative angle
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	
    	angle = turnAngle;
    	speed = setSpeed;
    	this.radius = radius;
    	
    }
    
    public Turn() {
    	angle = 0.0;
    	speed = 0.3;
    	radius = 20.0;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	currentAngle = Robot.measurement.getAngle();
    	target = currentAngle + angle;
    	setTimeout(5);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//currentAngle = Robot.measurement.getAngle();
    	//Robot.driveTrain.drive(angle - currentAngle, speed);
    	Robot.driveTrain.driveRadius(speed, radius);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isTimedOut() || Math.abs(target-Robot.measurement.getAngle()) <= 1.0;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
