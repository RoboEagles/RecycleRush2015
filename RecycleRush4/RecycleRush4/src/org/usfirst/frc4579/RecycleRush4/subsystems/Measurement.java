// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.RecycleRush4.subsystems;

import org.usfirst.frc4579.RecycleRush4.commands.Accumulate;
import org.usfirst.frc4579.RecycleRush4.RobotMap;

import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;


/**
 *
 */
public class Measurement extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Gyro gyro = RobotMap.measurementGyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double	totalDistance = 0., // Total distance travelled
    				distanceX = 0., // Total sideways distance: X-axis on accel
    				distanceY = 0., // Total forwards distance: Z-axis on accel
    				driftRate = 0., // Gyro drift rate in degrees/second
    				lastTime = 0.,  // Calculates delta t.
    				startTime = 0., //Calculates gyro time since initialization.
    				velocity = 0.,   // V (Velocity)
    				accelX = 0.,     //given from getY() due to the roborio orientation
    				accelY = 0.,     //given from getZ() due to the roborio orientation
    				accel = 0.0,     //total acceleration.
    				gyroAngle = 0., // Current gyro angle
	                accelOffsetX = 0., // Accelerometer bias (due to angle of roboRIO)
			        accelOffsetY = 0.,   //units of g's.
			        totalDistanceFwd = 0., // Adjusted for angle of movement (Y-axis) Net forward distance traveled on the field
			        totalDistanceSide = 0.; // Adjusted for angle of movement (X-axis) Net sideways distance traveled on the field

    private boolean validity = false; // True after initialization.
    private Timer timer = new Timer(); // Initializes, but does not start the timer.
    private Accelerometer robotAccelerometer = RobotMap.robotAccelerometer; // Defines the accelerometer
    
    static final double GtoINCHES = 386.088;   //convert from g's to inches/sec/sec.
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Accumulate());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    public void calibrate() {
    	double t;
    	//Note:  X direction is to the right, Y is forward. Gyro is plus degrees to the right.
    	System.out.println("Initiating Calibration***");
        t = Timer.getFPGATimestamp();
    	gyro.reset();    // Initializes gyro to zero
    	Timer.delay(1.); // Delay to get sample
    	//calculate degrees of drift per second.
    	driftRate = gyro.getAngle() / (Timer.getFPGATimestamp()-t);
    	
    	//calibrate built in accelerometer on two axes.
    	int reps = 100;
    	accelOffsetX = 0.0;
    	accelOffsetY = 0.0;
    	for (int i=0; i<reps; i++)  {
    		accelOffsetX += robotAccelerometer.getY();  //units of g's.
    		accelOffsetY += robotAccelerometer.getZ();
    	}
    	accelOffsetX /= (double)reps;   //units of g's.
    	accelOffsetY /= (double)reps;
    	System.out.println("Time for calibration: " + (Timer.getFPGATimestamp()-t) + " seconds..."); 
    	System.out.print("DRIFT RATE: " + driftRate + " deg/sec\nAccelOffsetX: " + accelOffsetX + " g's\nAccelOffsetY: " + accelOffsetY + " g's");
    }
    
    public void initGyro()  { // This method resets the gyro, since it's already been calibrated in calibrate()
    	timer.stop(); // Stops the timer before reset
    	timer.reset(); // Resets the timer to zero
    	gyro.reset(); // Resets the gyro to zero
    	startTime = 0.0; // Different from "lastTime," "startTime" is specific to the gyro calculations
    	timer.start();   //this counts time since initialization of gyro heading.    	
    }
    
    public void initAccel()  { // This method resets the accelerometer, since it's already been calibrated in calibrate()
    	accelX = 0.0; // Puts the stored acceleration values to zero
    	accelY = 0.0;
    	velocity = 0.0; // Sets the stored velocity value to zero
    	totalDistance = 0.0; // Resets the total distance traveled
    	distanceX = 0.0; // Resets the total sideways movement
    	distanceY = 0.0; // Resets the total forward movement
    	lastTime = 0.0; // Resets the last clock time
    }
    public void initialize() {
    	initGyro(); // Initializes the Gyro
    	initAccel(); // Initializes the RoboRIO Accelerometer
    	setValid(); // Sets the validity of the measurements of the class
    }
    
    public void accumulate() {
    	double t, deltaT; // t = time to store as last time, deltaT = currentTime - t (change in time from the last refresh)
    	//read hardware values.
    	double x = robotAccelerometer.getY();   //note change of axes.  Units of Gs. (Raw, Unadjusted Values)
    	double y = robotAccelerometer.getZ();   // Y is forward, X is sideways (actual axes depend on the orientation of the RoboRIO)
    	double g = gyro.getAngle(); // Returns the raw, unadjusted gyro angle
    	System.out.println("Raw x=" + x +"  y=" + y + "  g=" + g);
    	//use calibrations.
    	accelX = (x - accelOffsetX) * GtoINCHES;  //converts from Gs to units of inches/sec/sec on each used axis
    	accelY = (y - accelOffsetY) * GtoINCHES;
    	gyroAngle = g - (driftRate * (timer.get() - startTime)); // Adjusts for the drift of the gyro
    	System.out.println("accelX=" + accelX +"  accelY=" + accelY + "  gyroAngle=" + gyroAngle); // Print adjusted values
    	//calculate total acceleration.
        accel = Math.sqrt((accelX * accelX) + (accelY * accelY)); // return acceleration (its vector magnitude)
        System.out.println("accel=" + accel); // Print vector magnitude of acceleration
        //calculate delta t
        t = timer.get(); // Get the time on the timer (which was started in initGyro())
        deltaT = t - lastTime; // Finds the change in time for measurement calculation
        lastTime = t; // Sets the last time to the current time, preparing it for the next cycle
    	//deltaT = 0.020; //optional for debugging
    	System.out.println("DeltaT= " + deltaT); // Prints deltaT
    	//calculate velocity and distances
    	velocity += accel * deltaT; // V = a*deltaT (as per mechanics)
    	totalDistance += 0.5 * accel * deltaT * deltaT; // D = half of the acceleration, times deltaT squared as per the integration of velocity
    	distanceX += 0.5 * accelX * deltaT * deltaT; // Gets the independent X (sideways) acceleration
    	distanceY += 0.5 * accelY * deltaT * deltaT; // Gets the independent Y (forwards) acceleration
    	totalDistanceFwd = distanceY * Math.sin(gyroAngle); // Set net distances traveled 
    	totalDistanceSide = distanceX * Math.cos(gyroAngle);  // regardless of robot orientation, but assumes we start perpendicular to the driverstation
    	System.out.println("totalDistance="+ totalDistance + "  distanceX=" + distanceX + "  distanceY=" + distanceY); // Prints the acceleration calculation output
    }
    
    public double getAcceleration() {
    	double x = robotAccelerometer.getY(),
    			y = robotAccelerometer.getZ();
    	return Math.pow(x*x + y*y, 0.5)*GtoINCHES;
    }
    
    public double getVelocity() {
    	return velocity;
    }
    
    public double getDistance() {
    	return totalDistance;
    }
    
    public double getDistanceFwd() {
    	return totalDistanceFwd;
    }
    
    public double getDistanceSide() {
    	return totalDistanceSide;
    }
    
    public double getAngle() {
    	return gyroAngle;
    }
    
    public void setValid() {
    	validity = true;
    }
    
    public void setInvalid() {
    	validity = false;
    }
    
    public boolean isValid() {
    	return validity;
    }
}

