// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.RecycleRush4.subsystems;

import org.usfirst.frc4579.RecycleRush4.commands.Lift;
import org.usfirst.frc4579.RecycleRush4.RobotMap;

import com.RoboEagles4579.filters.SecondOrderLPF;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Lifter extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder encoder = RobotMap.lifterEncoder;
    DigitalInput topSwitch = RobotMap.lifterTopSwitch;
    DigitalInput bottomSwitch = RobotMap.lifterBottomSwitch;
    SpeedController motor = RobotMap.lifterMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //Low pass filter variables
    private SecondOrderLPF lpf = new SecondOrderLPF();
    private double encoderDistance = 0.,
    				maxRate = .25;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void manualControl(Joystick stick) { // Manual control for the height of the lifting mechanism
    	double y = stick.getY(),
    			rate = encoder.getRate();
    	y = lpf.filter(y);
    	if (Math.abs(rate) > maxRate) {
    		y = y / (rate / maxRate); 
    	}
    	motor.set(-y);
    }
    
    public void setSetpoint(double height) { // Needs to be run iteratively so that the lifting motor gets set continuously
    	encoderDistance = encoder.getDistance();
    	double rate = encoder.getRate(),
    			k = (1.0/2.0),
    			error = (height - encoderDistance)*k;
    	if (Math.abs(rate) > maxRate) {
    		error = error / rate / maxRate;
    	}
    	motor.set(error);
    }
    
    public double getDistance() { // Returns the distance that the encoder gives us
    	return encoder.getDistance();
    }
    
    public void stop() { // Hard stops the motors to the lift system
    	motor.set(0);
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Lift());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }
}

